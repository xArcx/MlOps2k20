import pandas as pd
import numpy as np
import keras
import matplotlib.pyplot as plt
from keras.applications import MobileNet
from keras.applications.mobilenet import preprocess_input

# MobileNet was designed to work on 224 x 224 pixel input images sizes
img_rows, img_cols = 224, 224 

# pre trained weights : create my model
model = MobileNet(weights='imagenet')

# Re-loads the MobileNet model without the top or FC layers
MobileNet_Model = MobileNet(weights = 'imagenet', 
                 include_top = False, 
                 input_shape = (img_rows, img_cols, 3))

# Here we freeze the last 4 layers 
# Layers are set to trainable as True by default
for layer in MobileNet_Model.layers:
    layer.trainable = False
    
# Let's print our layers 
for (i,layer) in enumerate(MobileNet_Model.layers):
    print(str(i) + " "+ layer.__class__.__name__, layer.trainable)


def FCHeadfunc(bottom_model, num_classes):
    """creates the top or head of the model that will be 
    placed ontop of the bottom layers"""

    x= bottom_model.output
    x= GlobalAveragePooling2D()(x)
    x= Dense(1024,activation='relu')(x)
    x= Dense(1024,activation='relu')(x)
    x= Dense(512,activation='relu')(x)
    x= Dense(num_classes,activation='softmax')(x)
    return x

from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten, GlobalAveragePooling2D
from keras.layers import Conv2D, MaxPooling2D, ZeroPadding2D
from keras.layers.normalization import BatchNormalization
from keras.models import Model
from PIL import Image


# Set our class number 
num_classes = 10

FC_Head = FCHeadfunc(MobileNet_Model, num_classes)

model = Model(inputs = MobileNet_Model.input, outputs = FC_Head)

print(model.summary())

from keras.preprocessing.image import ImageDataGenerator
from keras.preprocessing.image import load_img
from keras.utils import np_utils


train_data_dir = 'C:\\Users\\Home\\Desktop\\MLops2k20\\Bollywood_Dataset\\Bollywood_Dataset\\train\\'

validation_data_dir = 'C:\\Users\\Home\\Desktop\\MLops2k20\\Bollywood_Dataset\\Bollywood_Dataset\\validation\\'

# Let's use some data augmentaiton 
train_datagen = ImageDataGenerator(preprocessing_function=preprocess_input)
#     rescale=1./255,
#      rotation_range=45,
#      width_shift_range=0.3,
#      height_shift_range=0.3,
#      horizontal_flip=True,
#      fill_mode='nearest')
 
validation_datagen = ImageDataGenerator(rescale=1./255)
 
# set our batch size (typically on most mid tier systems we'll use 16-32)
batch_size = 32
 
train_generator = train_datagen.flow_from_directory(
        train_data_dir,
        target_size=(img_rows, img_cols),
        batch_size=batch_size,
        class_mode='categorical',
        shuffle=True)
 
validation_generator = validation_datagen.flow_from_directory(
        validation_data_dir,
        target_size=(img_rows, img_cols),
        batch_size=batch_size,
        class_mode='categorical',
        shuffle=True)

from keras.optimizers import Adam
from keras.callbacks import ModelCheckpoint, EarlyStopping

                     
checkpoint = ModelCheckpoint("tranflearnimagerecog.h5",
                             monitor="val_loss",
                             mode="min",
                             save_best_only = True,
                             verbose=1)

earlystop = EarlyStopping(monitor = 'val_loss', 
                          min_delta = 0, 
                          patience = 3,
                          verbose = 1,
                          restore_best_weights = True)

# we put our call backs into a callback list
callbacks = [earlystop, checkpoint]

# We use a very small learning rate 
model.compile(loss = 'categorical_crossentropy',
              optimizer = Adam(lr = 0.001),
              metrics = ['accuracy'])

# Enter the number of training and validation samples here
nb_train_samples = 300
nb_validation_samples = 100

# We only train 5 EPOCHS 
epochs = 5
batch_size = 16

history = model.fit_generator(
    train_generator,
    steps_per_epoch = nb_train_samples // batch_size,
    epochs = epochs,
    callbacks = callbacks,
    validation_data = validation_generator,
    validation_steps = nb_validation_samples // batch_size)
    
    
from keras.models import load_model

classifier = load_model('tranflearnimagerecog.h5')


import os
import cv2
import numpy as np
from os import listdir
from os.path import isfile, join

celeb_images_dict = {"[0]": "Aamir Khan ", 
                      "[1]": "Akshay Kumar",
                      "[2]": "Hrithik Roshan",
                      "[3]": "Kajal Agarwal",
                      "[4]": "Kareena Kapoor",
                      "[5]": "Katrina Kaif",
                      "[6]": "Madhuri Dixit",
                      "[7]": "Salman Khan",
                      "[8]": "ShahRukh Khan",
                      "[9]": "Shilpa Shetty"}

celeb_images_dict_n = {"Aamir Khan": "Aamir Khan", 
                      "Akshay Kumar": "Akshay Kumar",
                      "Hrithik Roshan": "Hrithik Roshan",
                      "Kajal Agarwal": "Kajal Agarwal",
                      "Kareena Kapoor": "Kareena Kapoor",
                      "Katrina Kaif": "Katrina Kaif",
                      "Madhuri Dixit": "Madhuri Dixit",
                      "Salman Khan": "Salman Khan",
                      "ShahRukh Khan": "ShahRukh Khan",
                      "Shilpa Shetty": "Shilpa Shetty"}

def draw_test(name, pred, im):
    celeb = celeb_images_dict[str(pred)]
    BLACK = [0,0,0]
    expanded_image = cv2.copyMakeBorder(im, 80, 0, 0, 100 ,cv2.BORDER_CONSTANT,value=BLACK)
    cv2.putText(expanded_image, celeb, (20, 60) , cv2.FONT_HERSHEY_SIMPLEX,1, (0,0,255), 2)
    cv2.imshow(name, expanded_image)

def getRandomImage(path):
    """function loads a random images from a random folder in our test path """
    folders = list(filter(lambda x: os.path.isdir(os.path.join(path, x)), os.listdir(path)))
    random_directory = np.random.randint(0,len(folders))
    path_class = folders[random_directory]
    print("Class - " + celeb_images_dict_n[str(path_class)])
    file_path = path + path_class
    file_names = [f for f in listdir(file_path) if isfile(join(file_path, f))]
    random_file_index = np.random.randint(0,len(file_names))
    image_name = file_names[random_file_index]
    return cv2.imread(file_path+"/"+image_name)    

for i in range(0,10):
    input_im = getRandomImage("C:\\Users\\Home\\Desktop\\MLops2k20\\Bollywood_Dataset\\Bollywood_Dataset\\validation\\")
    input_original = input_im.copy()
    input_original = cv2.resize(input_original, None, fx=0.5, fy=0.5, interpolation = cv2.INTER_LINEAR)
    
    input_im = cv2.resize(input_im, (224, 224), interpolation = cv2.INTER_LINEAR)
    input_im = input_im / 255.
    input_im = input_im.reshape(1,224,224,3) 
    
    # Get Prediction
    res = np.argmax(classifier.predict(input_im, 1, verbose = 0), axis=1)
    
    # Show image with predicted class
    draw_test("Prediction", res, input_original) 
    cv2.waitKey(0)

cv2.destroyAllWindows()
